// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "ws/ws.proto" (package "ws", syntax proto3)
// tslint:disable
import { Empty } from "../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../google/protobuf/any";
/**
 * @generated from protobuf message ws.GetSubscribesByUserParams
 */
export interface GetSubscribesByUserParams {
    /**
     * @generated from protobuf field: int32 user_id = 1
     */
    userId: number;
}
/**
 * @generated from protobuf message ws.GetSubscribesByUserResponse
 */
export interface GetSubscribesByUserResponse {
    /**
     * @generated from protobuf field: repeated string topics = 1
     */
    topics: string[];
}
/**
 * @generated from protobuf message ws.ToggleSubscribeParams
 */
export interface ToggleSubscribeParams {
    /**
     * @generated from protobuf field: int32 user_id = 1
     */
    userId: number;
    /**
     * @generated from protobuf field: repeated string topics = 2
     */
    topics: string[];
}
/**
 * @generated from protobuf message ws.Message
 */
export interface Message {
    /**
     * @generated from protobuf field: string topic = 1
     */
    topic: string;
    /**
     * @generated from protobuf field: google.protobuf.Any payload = 2
     */
    payload?: Any;
}
/**
 * @generated from protobuf message ws.Messages
 */
export interface Messages {
    /**
     * @generated from protobuf field: repeated ws.Message messages = 1
     */
    messages: Message[];
}
/**
 * @generated from protobuf message ws.PublishMessage
 */
export interface PublishMessage {
    /**
     * @generated from protobuf field: repeated string topics = 1
     */
    topics: string[];
    /**
     * @generated from protobuf field: google.protobuf.Any payload = 2
     */
    payload?: Any;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetSubscribesByUserParams$Type extends MessageType<GetSubscribesByUserParams> {
    constructor() {
        super("ws.GetSubscribesByUserParams", [
            { no: 1, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetSubscribesByUserParams>): GetSubscribesByUserParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetSubscribesByUserParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSubscribesByUserParams): GetSubscribesByUserParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 user_id */ 1:
                    message.userId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSubscribesByUserParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 user_id = 1; */
        if (message.userId !== 0)
            writer.tag(1, WireType.Varint).int32(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ws.GetSubscribesByUserParams
 */
export const GetSubscribesByUserParams = new GetSubscribesByUserParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSubscribesByUserResponse$Type extends MessageType<GetSubscribesByUserResponse> {
    constructor() {
        super("ws.GetSubscribesByUserResponse", [
            { no: 1, name: "topics", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetSubscribesByUserResponse>): GetSubscribesByUserResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.topics = [];
        if (value !== undefined)
            reflectionMergePartial<GetSubscribesByUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSubscribesByUserResponse): GetSubscribesByUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string topics */ 1:
                    message.topics.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSubscribesByUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string topics = 1; */
        for (let i = 0; i < message.topics.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.topics[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ws.GetSubscribesByUserResponse
 */
export const GetSubscribesByUserResponse = new GetSubscribesByUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToggleSubscribeParams$Type extends MessageType<ToggleSubscribeParams> {
    constructor() {
        super("ws.ToggleSubscribeParams", [
            { no: 1, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "topics", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ToggleSubscribeParams>): ToggleSubscribeParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = 0;
        message.topics = [];
        if (value !== undefined)
            reflectionMergePartial<ToggleSubscribeParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToggleSubscribeParams): ToggleSubscribeParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 user_id */ 1:
                    message.userId = reader.int32();
                    break;
                case /* repeated string topics */ 2:
                    message.topics.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToggleSubscribeParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 user_id = 1; */
        if (message.userId !== 0)
            writer.tag(1, WireType.Varint).int32(message.userId);
        /* repeated string topics = 2; */
        for (let i = 0; i < message.topics.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.topics[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ws.ToggleSubscribeParams
 */
export const ToggleSubscribeParams = new ToggleSubscribeParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Message$Type extends MessageType<Message> {
    constructor() {
        super("ws.Message", [
            { no: 1, name: "topic", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "payload", kind: "message", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<Message>): Message {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.topic = "";
        if (value !== undefined)
            reflectionMergePartial<Message>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Message): Message {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string topic */ 1:
                    message.topic = reader.string();
                    break;
                case /* google.protobuf.Any payload */ 2:
                    message.payload = Any.internalBinaryRead(reader, reader.uint32(), options, message.payload);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Message, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string topic = 1; */
        if (message.topic !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.topic);
        /* google.protobuf.Any payload = 2; */
        if (message.payload)
            Any.internalBinaryWrite(message.payload, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ws.Message
 */
export const Message = new Message$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Messages$Type extends MessageType<Messages> {
    constructor() {
        super("ws.Messages", [
            { no: 1, name: "messages", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Message }
        ]);
    }
    create(value?: PartialMessage<Messages>): Messages {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messages = [];
        if (value !== undefined)
            reflectionMergePartial<Messages>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Messages): Messages {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ws.Message messages */ 1:
                    message.messages.push(Message.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Messages, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ws.Message messages = 1; */
        for (let i = 0; i < message.messages.length; i++)
            Message.internalBinaryWrite(message.messages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ws.Messages
 */
export const Messages = new Messages$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PublishMessage$Type extends MessageType<PublishMessage> {
    constructor() {
        super("ws.PublishMessage", [
            { no: 1, name: "topics", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "payload", kind: "message", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<PublishMessage>): PublishMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.topics = [];
        if (value !== undefined)
            reflectionMergePartial<PublishMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PublishMessage): PublishMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string topics */ 1:
                    message.topics.push(reader.string());
                    break;
                case /* google.protobuf.Any payload */ 2:
                    message.payload = Any.internalBinaryRead(reader, reader.uint32(), options, message.payload);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PublishMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string topics = 1; */
        for (let i = 0; i < message.topics.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.topics[i]);
        /* google.protobuf.Any payload = 2; */
        if (message.payload)
            Any.internalBinaryWrite(message.payload, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ws.PublishMessage
 */
export const PublishMessage = new PublishMessage$Type();
/**
 * @generated ServiceType for protobuf service ws.WebSocket
 */
export const WebSocket = new ServiceType("ws.WebSocket", [
    { name: "GetSubscribesByUser", options: {}, I: GetSubscribesByUserParams, O: GetSubscribesByUserResponse },
    { name: "SubscribeUserToTopics", options: {}, I: ToggleSubscribeParams, O: Empty },
    { name: "UnsubscribeUserFromTopics", options: {}, I: ToggleSubscribeParams, O: Empty }
]);
