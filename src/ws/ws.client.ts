// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "ws/ws.proto" (package "ws", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { WebSocket } from "./ws";
import type { Empty } from "../google/protobuf/empty";
import type { ToggleSubscribeParams } from "./ws";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetSubscribesByUserResponse } from "./ws";
import type { GetSubscribesByUserParams } from "./ws";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service ws.WebSocket
 */
export interface IWebSocketClient {
    /**
     * @generated from protobuf rpc: GetSubscribesByUser
     */
    getSubscribesByUser(input: GetSubscribesByUserParams, options?: RpcOptions): UnaryCall<GetSubscribesByUserParams, GetSubscribesByUserResponse>;
    /**
     * @generated from protobuf rpc: SubscribeUserToTopics
     */
    subscribeUserToTopics(input: ToggleSubscribeParams, options?: RpcOptions): UnaryCall<ToggleSubscribeParams, Empty>;
    /**
     * @generated from protobuf rpc: UnsubscribeUserFromTopics
     */
    unsubscribeUserFromTopics(input: ToggleSubscribeParams, options?: RpcOptions): UnaryCall<ToggleSubscribeParams, Empty>;
}
/**
 * @generated from protobuf service ws.WebSocket
 */
export class WebSocketClient implements IWebSocketClient, ServiceInfo {
    typeName = WebSocket.typeName;
    methods = WebSocket.methods;
    options = WebSocket.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetSubscribesByUser
     */
    getSubscribesByUser(input: GetSubscribesByUserParams, options?: RpcOptions): UnaryCall<GetSubscribesByUserParams, GetSubscribesByUserResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetSubscribesByUserParams, GetSubscribesByUserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SubscribeUserToTopics
     */
    subscribeUserToTopics(input: ToggleSubscribeParams, options?: RpcOptions): UnaryCall<ToggleSubscribeParams, Empty> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ToggleSubscribeParams, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UnsubscribeUserFromTopics
     */
    unsubscribeUserFromTopics(input: ToggleSubscribeParams, options?: RpcOptions): UnaryCall<ToggleSubscribeParams, Empty> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ToggleSubscribeParams, Empty>("unary", this._transport, method, opt, input);
    }
}
